// Copyright (c) ZeroC, Inc.

package com.example.ice.cancellation.client;

import com.example.visitorcenter.GreeterPrx;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.InvocationCanceledException;
import com.zeroc.Ice.InvocationTimeoutException;
import com.zeroc.Ice.UnknownException;
import com.zeroc.Ice.Util;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
class Client {
    public static void main(String[] args) {
        // Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
        try (Communicator communicator = Util.initialize(args)) {
            // GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a
            // "stringified proxy" with the address of the target object.
            // If you run the server on a different computer, replace localhost in the string below with the server's
            // hostname or IP address.
            GreeterPrx greeter = GreeterPrx.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

            // Create a proxy to the slow greeter. It uses the same connection as the regular greeter.
            GreeterPrx slowgreeter =
                GreeterPrx.createProxy(communicator, "slowGreeter:tcp -h localhost -p 4061");

            // Send a request to the regular greeter and get the response.
            CompletableFuture<String> futureGreeting = greeter.greetAsync(System.getProperty("user.name"));
            String greeting;
            try {
                greeting = futureGreeting.get();
                System.out.println(greeting);
            } catch (InterruptedException e) {
                assert false; // We don't interrupt this thread.
            } catch (ExecutionException exception) {
                System.out.println("Could not get greeting: " + exception.getMessage());
            }

            // Create another slow greeter proxy with an invocation timeout of 4 seconds (the default invocation timeout
            // is infinite).
            GreeterPrx slowgreeter4s =
                GreeterPrx.uncheckedCast(slowgreeter.ice_invocationTimeout(4));

            // Send a request to the slow greeter with the 4-second invocation timeout.
            futureGreeting = slowgreeter4s.greetAsync("alice");
            try {
                greeting = futureGreeting.get();
                System.out.println(greeting);
            } catch (InterruptedException e) {
                assert false; // We don't interrupt this thread.
            }  catch (InvocationTimeoutException exception) {
                System.out.println("Caught InvocationTimeoutException, as expected: " + exception.getMessage());
            } catch (ExecutionException exception) {
                System.out.println("Could not get greeting: " + exception.getMessage());
            }

            // Send a request to the slow greeter, and cancel this request after 4 seconds.
            futureGreeting = slowgreeter.greetAsync("bob", cancel);
            try {
                greeting = futureGreeting.get();
                System.out.println(greeting);
            } catch (InterruptedException e) {
                System.out.println("oops");
                assert false; // We don't interrupt this thread.
            } catch (InvocationCanceledException exception) {
                System.out.println("Caught InvocationCanceledException, as expected: " + exception.getMessage());
            } catch (ExecutionException exception) {
                System.out.println("Could not get greeting: " + exception.getMessage());
            }

            // Verify the regular greeter still works.
            futureGreeting = greeter.greetAsync("carol");
            try {
                greeting = futureGreeting.get(); 
                System.out.println(greeting);
            } catch (InterruptedException e) {
                assert false; // We don't interrupt this thread.
            } catch (ExecutionException exception) {
                System.out.println("Could not get greeting: " + exception.getMessage());
            }

            // Send a request to the slow greeter, and wait forever for the response.
            System.out.println("Please press Ctrl+C in the server's terminal to cancel the slow greeter dispatch.");
            futureGreeting = slowgreeter.greetAsync("dave");
            try {
                greeting = futureGreeting.get();
                System.out.println(greeting);
            } catch (InterruptedException e) {
               System.out.println("Interrupted");
            } catch (UnknownException exception) {
                System.out.println("UnknownException, as expected: " + exception.getMessage());
            } catch (ExecutionException exception) {
                System.out.println("Could not get greeting: " + exception.getMessage());
            }
        }
    }
}
