// Copyright (c) ZeroC, Inc.

package com.example.ice.cancellation.server;

import com.example.visitorcenter.Greeter;
import com.zeroc.Ice.Current;
import com.zeroc.Ice.InvocationCanceledException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.TimeUnit;

/**
 * Chatbot is an Ice servant that implements Slice interface Greeter.
 */
class Chatbot implements Greeter
{
    private long _delay;
    private TimeUnit _timeUnit;

    // Creates a new Chatbot instance.
    public Chatbot(long delay, TimeUnit timeUnit) {
        _delay = delay;
        _timeUnit = timeUnit;
    }

    // Implements the abstract method 'greetAsync' from the Greeter interface generated by the Slice compiler.
    // This variant is the asynchronous implementation.
    public CompletionStage<String> greetAsync(String name, Current current) {
        System.out.println("Dispatching greet request { name = '" + name + "' }");

        try {
            return CompletableFuture.supplyAsync(
                () -> "Hello, " + name + "!",
                CompletableFuture.delayedExecutor(_delay, _timeUnit)
            );
        }
            catch (CancellationException exception)
            {
                System.out.println("greet request canceled { name = '" + name + "' }");
                throw new InvocationCanceledException();
            }
    }
}
