// Copyright (c) ZeroC, Inc.

// slice2cs version 3.8.0-alpha.0
// <auto-generated>Generated from Slice file 'Greeter.ice'.</auto-generated>

#nullable enable

[assembly:Ice.Slice("Greeter.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace VisitorCenter
{
    /// <summary>The errors returned by the Greeter.</summary>
    /// <remarks>The Slice compiler generated this enum from Slice enumeration <c>::VisitorCenter::GreeterError</c>.</remarks>
    public enum GreeterError
    {
        EmptyName,

        NameTooLong,

        Away
    }

    /// <summary>Provides methods to marshal and unmarshal a <see cref="GreeterError" />.</summary>
    /// <remarks>The Slice compiler generated this enum helper class from Slice enumeration <c>::VisitorCenter::GreeterError</c>.</remarks>
    public sealed class GreeterErrorHelper
    {
        /// <summary>Marshals a value into an output stream.</summary>
        /// <param name="ostr">The output stream.</param>
        /// <param name="v">The value to marshal.</param>
        public static void write(Ice.OutputStream ostr, GreeterError v)
        {
            ostr.writeEnum((int)v, 2);
        }

        /// <summary>Unmarshals a value from an input stream.</summary>
        /// <param name="istr">The input stream.</param>
        /// <returns>The unmarshaled value.</returns>
        public static GreeterError read(Ice.InputStream istr)
        {
            GreeterError v;
            v = (GreeterError)istr.readEnum(2);
            return v;
        }
    }

    /// <summary>Represents an exception.</summary>
    /// <remarks>The Slice compiler generated this exception class from Slice exception <c>::VisitorCenter::GreeterException</c>.</remarks>
    [Ice.SliceTypeId("::VisitorCenter::GreeterException")]
    public partial class GreeterException : Ice.UserException
    {
        public string Message = "";

        public GreeterError Error;

        /// <summary>Initializes a new instance of the <see cref="GreeterException" /> class.</summary>
        public GreeterException(string Message, GreeterError Error)
        {
            global::System.ArgumentNullException.ThrowIfNull(Message);
            this.Message = Message;
            this.Error = Error;
        }

        /// <summary>Initializes a new instance of the <see cref="GreeterException" /> class.</summary>
        public GreeterException()
        {
        }

        public override string ice_id() => "::VisitorCenter::GreeterException";

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::VisitorCenter::GreeterException", -1, true);
            ostr_.writeString(Message);
            ostr_.writeEnum((int)Error, 2);
            ostr_.endSlice();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Message = istr_.readString();
            Error = (GreeterError)istr_.readEnum(2);
            istr_.endSlice();
        }
    }

    /// <summary>Represents a simple greeter.</summary>
    /// <remarks>The Slice compiler generated this client-side interface from Slice interface <c>::VisitorCenter::Greeter</c>.
    /// Use the methods of this interface to invoke operations on a remote Ice object that implements <c>Greeter</c>.</remarks>
    public partial interface GreeterPrx : Ice.ObjectPrx
    {
        /// <summary>Creates a personalized greeting.</summary>
        /// <param name="name">The name of the person to greet.</param>
        /// <param name="context">The request context.</param>
        /// <returns>The greeting or exception.</returns>
        string Greet(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>Creates a personalized greeting.</summary>
        /// <param name="name">The name of the person to greet.</param>
        /// <param name="context">The request context.</param>
        /// <param name="progress">The sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> GreetAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>Helper class for proxy <see cref="GreeterPrx" />.</summary>
    /// <remarks>The Slice compiler generated this proxy helper class from Slice interface <c>::VisitorCenter::Greeter</c>.</remarks>
    public sealed partial class GreeterPrxHelper : Ice.ObjectPrxHelperBase, GreeterPrx
    {
        public string Greet(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_GreetAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<string> GreetAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_GreetAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GreetAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_Greet_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_Greet(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Greet_name = "greet";

        private void _iceI_Greet(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _Greet_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch (GreeterException)
                    {
                        throw;
                    }
                    catch (Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        /// <summary>Creates a new proxy from a communicator and a proxy string.</summary>
        /// <param name="communicator">The communicator.</param>
        /// <param name="proxyString">The stringified proxy.</param>
        /// <returns>A new proxy.</returns>
        public static GreeterPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new GreeterPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" /> after checking that the target object implements Slice interface <c>Greeter</c>.</summary>
        /// <param name="b">The source proxy.</param>
        /// <param name="ctx">The request context.</param>
        /// <returns>A proxy with the requested type, or null if the target object does not implement Slice interface <c>Greeter</c>.</returns>
        public static GreeterPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new GreeterPrxHelper(b) : null;

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" /> after checking that the target facet implements Slice interface <c>Greeter</c>.</summary>
        /// <param name="b">The source proxy.</param>
        /// <param name="f">The facet.</param>
        /// <param name="ctx">The request context.</param>
        /// <returns>A proxy with the requested type, or null if the target facet does not implement Slice interface <c>Greeter</c>.</returns>
        public static GreeterPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" /> after checking that the target object implements Slice interface <c>Greeter</c>.</summary>
        /// <param name="b">The source proxy.</param>
        /// <param name="ctx">The request context.</param>
        /// <returns>A proxy with the requested type, or null if the target object does not implement Slice interface <c>Greeter</c>.</returns>
        public static async global::System.Threading.Tasks.Task<GreeterPrx?> checkedCastAsync(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            await b.ice_isAAsync(ice_staticId(), ctx).ConfigureAwait(false) ? new GreeterPrxHelper(b) : null;

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" /> after checking that the target facet implements Slice interface <c>Greeter</c>.</summary>
        /// <param name="b">The source proxy.</param>
        /// <param name="f">The facet.</param>
        /// <param name="ctx">The request context.</param>
        /// <returns>A proxy with the requested type, or null if the target facet does not implement Slice interface <c>Greeter</c>.</returns>
        public static global::System.Threading.Tasks.Task<GreeterPrx?> checkedCastAsync(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCastAsync(b.ice_facet(f), ctx);

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" />. This method does not perform any check.</summary>
        /// <param name="b">The source proxy.</param>
        /// <returns>A proxy with the requested type, or null if the source proxy is null.</returns>
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]
        public static GreeterPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new GreeterPrxHelper(b) : null;

        /// <summary>Downcasts a proxy to a <see cref="GreeterPrx" /> after changing its facet. This method does not perform any check.</summary>
        /// <param name="b">The source proxy.</param>
        /// <param name="f">The facet.</param>
        /// <returns>A proxy with the requested type, or null if the source proxy is null.</returns>
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]
        public static GreeterPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        /// <summary>Gets the type ID of the associated Slice interface.</summary>
        /// <returns>The string <c>::VisitorCenter::Greeter</c>.</returns>
        public static string ice_staticId() => "::VisitorCenter::Greeter";

        /// <summary>Marshals a value into an output stream.</summary>
        /// <param name="ostr">The output stream.</param>
        /// <param name="v">The value to marshal.</param>
        public static void write(Ice.OutputStream ostr, GreeterPrx? v)
        {
            ostr.writeProxy(v);
        }

        /// <summary>Unmarshals a value from an input stream.</summary>
        /// <param name="istr">The input stream.</param>
        /// <returns>The unmarshaled value.</returns>
        public static GreeterPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new GreeterPrxHelper(proxy) : null;

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new GreeterPrxHelper(reference);

        private GreeterPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private GreeterPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace VisitorCenter
{
    /// <summary>Represents a simple greeter.</summary>
    /// <remarks>The Slice compiler generated this server-side interface from Slice interface <c>::VisitorCenter::Greeter</c>.
    /// Your servant class implements this interface by deriving from <see cref="GreeterDisp_" /> or from the Disp_ class for a derived interface.</remarks>
    [Ice.SliceTypeId("::VisitorCenter::Greeter")]
    public partial interface Greeter : Ice.Object
    {
        /// <summary>Creates a personalized greeting.</summary>
        /// <param name="name">The name of the person to greet.</param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The greeting or exception.</returns>
        string Greet(string name, Ice.Current current);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_GreetAsync(
            Greeter obj,
            Ice.IncomingRequest request)
        {
            Ice.CurrentExtensions.checkNonIdempotent(request.current);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_name;
            iceP_name = istr.readString();
            istr.endEncapsulation();
            var ret = obj.Greet(iceP_name, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    /// <summary>Implements <see cref="Ice.Object.dispatchAsync" /> for the operations of Slice interface <c>Greeter</c>.</summary>
    /// <remarks>The Slice compiler generated this dispatch helper class from Slice interface <c>::VisitorCenter::Greeter</c>.
    /// Your servant class derives from this abstract class to implement Slice interface <c>Greeter</c>.</remarks>
    public abstract partial class GreeterDisp_ : Ice.ObjectImpl, Greeter
    {
        /// <summary>Gets the type ID of the associated Slice interface.</summary>
        /// <returns>The string <c>::VisitorCenter::Greeter</c>.</returns>
        public static new string ice_staticId() => "::VisitorCenter::Greeter";

        public abstract string Greet(string name, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "greet" => Greeter.iceD_GreetAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}
