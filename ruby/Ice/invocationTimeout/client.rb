#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
# The communicator initialization parses the command-line options to find and set additional properties.
Ice::initialize(ARGV) do |communicator|
    # We create a Greeter proxy using a string that dictates how the proxy is meant to be set up.
    greeter = VisitorCenter::GreeterPrx.new(communicator, "greeter:tcp -h localhost -p 4061")

    # We create another proxy with an invocation timeout of four (4) seconds.
    slowGreeter = VisitorCenter::GreeterPrx.new(communicator, "slowGreeter:tcp -h localhost -p 4061").ice_invocationTimeout(4000)

    # We send a request and await a response with the regular greeter.
    greeting = greeter.greet(Etc.getlogin)
    puts greeting

    # We also send a request with the slowGreeter and attempt to wait for a response.
    begin
        greeting = slowGreeter.greet(Etc.getlogin)
        puts "Received unexpected greeting: " + greeting
    rescue Ice::InvocationTimeoutException => exception
        puts "Caught expected exception: " + exception.to_s
    end

    # We verify that the standard greeter still works.
    greeting = greeter.greet("carol")
    puts greeting
end
