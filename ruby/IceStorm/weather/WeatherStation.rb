# Copyright (c) ZeroC, Inc.

# slice2rb version 3.8.0-alpha.0
# <auto-generated>Generated from Slice file 'WeatherStation.ice'.</auto-generated>

require 'Ice'

module ::ClearSky
    if not defined?(::ClearSky::T_AtmosphericConditions)
        T_AtmosphericConditions = Ice::__declareClass('::ClearSky::AtmosphericConditions')
    end

    if not defined?(::ClearSky::AtmosphericConditions)
        class AtmosphericConditions < Ice::Value

            def initialize(temperature=0.0, humidity=0.0)
                @temperature = temperature
                @humidity = humidity
            end

            attr_accessor :temperature, :humidity
        end

        T_AtmosphericConditions.defineClass(AtmosphericConditions, -1, false, nil, [
            ['temperature', Ice::T_double, false, 0],
            ['humidity', Ice::T_double, false, 0]
        ])
    end

    if not defined?(::ClearSky::T_WeatherStationPrx)
        T_WeatherStationPrx = Ice::__declareProxy('::ClearSky::WeatherStation')
    end

    if not defined?(::ClearSky::WeatherStationPrx)
        module WeatherStationPrx_mixin
            def report(sensorId, timeStamp, reading, context=nil)
                WeatherStationPrx_mixin::OP_report.invoke(self, [sensorId, timeStamp, reading], context)
            end
        end

        class WeatherStationPrx < Ice::ObjectPrx
            include WeatherStationPrx_mixin
        end

        T_WeatherStationPrx.defineProxy(WeatherStationPrx, nil, [])

        WeatherStationPrx_mixin::OP_report = Ice::__defineOperation('report', 'report', Ice::OperationMode::Normal, nil, [[Ice::T_string, false, 0], [Ice::T_string, false, 0], [::ClearSky::T_AtmosphericConditions, false, 0]], [], nil, [])
    end
end
